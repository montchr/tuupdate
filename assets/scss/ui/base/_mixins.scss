/*------------------------------------*\
    TEMPLE UPDATE -- MIXINS
\*------------------------------------*/

/**
 * Mixin for producing cut corners.
 *
 * Used by the pane object.
 * Some easy-to-use classes are are in the cut object file.
 *
 * ^Depends on Compass.
 *
 * Many thanks to Charlotte Dann for the original idea!
 * http://codepen.io/pouretrebelle/pen/pbwIj
 *
 * ^TODO Gradient method has not been defined yet
 * ^TODO What's the effect of using ceil() or not?
 * ^TODO Options for top cuts
 *
 * $color           | mixed  | The color to be used. This is also applied to the parent element.
 * $size            | px/em  | Size of the cut corner
 * $corner          | string | The corner(s) to cut. E.G. 'bottom-left', 'top-both'
 * $margin          | mixed  | The amount of margin for the bottom of the element. This value is added on to the $size.
 * $positioning     | bool   | Does the element already have relative or absolute positioning? If so, set this to false.
 * $color-override  | bool   | Set to true to only change color, nothing else
 * $margin-override | bool   | Set to true to only change margin, nothing else. If using a top cut, $corner must be set to top-*
 * $type            | string | Use the pseudo-element or the gradient method
 */
@mixin corner-cut(
                  $color: white,
                  $size: $base-spacing-unit * 2,
                  $corner: "bottom-right",
                  $margin: 0,
                  $positioning: true,
                  $color-override: false,
                  $margin-override: false,
                  $type: "pseudo"
                  ) {

	$trigsize: sqrt(pow($size,2)/2);
	$size: sqrt(2*pow($trigsize,2));

	background-color: $color;

	@if $positioning {
		position: relative;
	}

	@if $type == pseudo {

		@if $color-override {

			&::before {
				border-color: $color transparent;
			}

			&::after {
				background-color: $color;
			}

		}

		@if $margin-override {

			@if $corner == bottom-left or bottom-right or bottom-both {
				margin-bottom: $size + $margin;
			} @elseif $corner == top-left or top-right or top-both {
				margin-top: $size + $margin;
			}

		}

		@if $color-override == false and $margin-override == false {

			@if $corner == bottom-left or bottom-right or bottom-both {
				margin-bottom: $size + $margin;
			} @elseif $corner == top-left or top-right or top-both {
				margin-top: $size + $margin;
			}

			&::before, &::after {
				content: '';
				position: absolute;
				left: 0;
				z-index: 1;
			}

			&::before {
				width: 100%;
				height: $size;
				border-color: $color transparent;
				border-style: solid;

				@if $corner == bottom-left or bottom-right or bottom-both {
					bottom: -$size;

					@if $corner == bottom-left {
						border-width: $size 0 0 ceil($size);
					} @elseif $corner == bottom-right {
						border-width: $size ceil($size) 0 0;
					} @elseif $corner == bottom-both {
						border-width: $size ceil($size) 0 $size;
					}
				} // endif bottom

				@if $corner == top-right or top-left {} // endif top
			} // endif before

			&::after {
				bottom: -$size;
				width: 100%;
				background-color: $color;
			}

		} // endif color-override
	} // endif pseudo
} // end mixin corner-cut()




/**
 * Set unhovered and hovered link colors easily.
 *
 * Unvisited/visited will be the same color,
 * hover/active will be the same color.
 */
@mixin a-color($unhovered: $color__alpha, $hovered: black) {
	&,
	&:visited {
		color: $unhovered;
	}

	&:hover,
	&:active {
		color: $hovered;
	}
}




/**
 * Nav object mixin
 *
 * Useful for overriding nav object in different media queries.
 */
@mixin nav($nav: true,
           $stacked: false,
           $banner: false,
           $block: false,
           $fit: false,
		   $keywords: false
           ) {

	@if $nav {
		/**
		 * Nav abstraction as per: csswizardry.com/2011/09/the-nav-abstraction
		 * When used on an `ol` or `ul`, this class throws the list into horizontal mode
		 * e.g.:
		 *
		   <ul class=nav>
		       <li><a href=#>Home</a></li>
		       <li><a href=#>About</a></li>
		       <li><a href=#>Portfolio</a></li>
		       <li><a href=#>Contact</a></li>
		   </ul>
		 *
		 * Demo: jsfiddle.net/inuitcss/Vnph4
		 *
		 */
		list-style:none;
		margin-left:0;
		@extend .cf;

		> li{

		    &,
		    > a{
		        display:inline-block;
		       *display:inline;
		        zoom:1;
		    }
		}
	} // end nav

	@if $stacked {
		/**
		 * `.nav--stacked` extends `.nav` and throws the list into vertical mode, e.g.:
		 *
		   <ul class="nav  nav--stacked">
		       <li><a href=#>Home</a></li>
		       <li><a href=#>About</a></li>
		       <li><a href=#>Portfolio</a></li>
		       <li><a href=#>Contact</a></li>
		   </ul>
		 *
		 */
		> li{
		    display:list-item;

		    > a{
		        display:block;
		    }
		}
	} // end stacked

	@if $banner {
		/**
		 * `.nav--banner` extends `.nav` and centres the list, e.g.:
		 *
		   <ul class="nav  nav--banner">
		       <li><a href=#>Home</a></li>
		       <li><a href=#>About</a></li>
		       <li><a href=#>Portfolio</a></li>
		       <li><a href=#>Contact</a></li>
		   </ul>
		 *
		 */
		text-align: center;
	} // end banner

	@if $block {
		/**
		 * Give nav links a big, blocky hit area. Extends `.nav`, e.g.:
		 *
		   <ul class="nav  nav--block">
		       <li><a href=#>Home</a></li>
		       <li><a href=#>About</a></li>
		       <li><a href=#>Portfolio</a></li>
		       <li><a href=#>Contact</a></li>
		   </ul>
		 *
		 */
	    line-height:1;
	    /**
	     * Remove whitespace caused by `inline-block`.
	     */
	    letter-spacing:-0.31em;
	    word-spacing:-0.43em;
	    white-space:nowrap;

	    > li{
	        letter-spacing:normal;
	        word-spacing:normal;

	        > a{
	            padding:$half-spacing-unit;
	        }
	    }
	} // end block

	@if $fit {
		/**
		 * Force a nav to occupy 100% of the available width of its parent. Extends
		 * `.nav`, e.g.:
		 *
		   <ul class="nav  nav--fit">
		       <li><a href=#>Home</a></li>
		       <li><a href=#>About</a></li>
		       <li><a href=#>Portfolio</a></li>
		       <li><a href=#>Contact</a></li>
		   </ul>
		 *
		 * Thanks to @pimpl for this idea!
		 */
	    display:table;
	    width:100%;

	    > li{
	        display:table-cell;

	        > a{
	            display:block;
	        }
	    }
	} // end fit

	@if $keywords {
		/**
		 * Make a list of keywords. Extends `.nav`, e.g.:
		 *
		   `<ul class="nav  nav--keywords>`
		 *
		 */

	    > li{

	        &:after{
	            content:"\002C" "\00A0";
	        }

	        &:last-child:after{
	            display:none;
	        }
	    }
	} // end keywords
}





/**
 * Hide text only, not other content.
 *
 * Taken from Twitter Bootstrap v3.0.1
 */
@mixin text-hide() {
  font: #{0/0} a;
  color: transparent;
  text-shadow: none;
  background-color: transparent;
  border: 0;
}
